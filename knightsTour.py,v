head	1.2;
access;
symbols;
locks
	root:1.2; strict;
comment	@# @;


1.2
date	2017.11.13.04.40.24;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2017.11.13.04.08.44;	author root;	state Exp;
branches;
next	;


desc
@This is the solution to famous Knight Tour Problem, with both using backtracking and Warnsdorff's Algorithm
@


1.2
log
@Removed the debug statements, trimmed the code for unnecessary steps
@
text
@N = 8

def solveKT():
	sol = [[-1 for x in range(N)] for y in range(N)]
	for i in range(N):
		print sol[i]
	
	xMove = [1,  1, -1, -1, 2,  2, -2, -2]
	yMove = [2, -2,  2, -2, 1, -1,  1, -1]

	#set position of knight, to first block
	sol[0][0] = 0
	
	#if (solveKTUtil(0, 0, 1, sol, xMove, yMove) == False):
	if (solveKTUtil_Heuristic(0, 0, 1, sol, xMove, yMove) == False):
		print "No Solution"
		return

	for i in range(N):
		print '[',
		for j in range(N):
			print '%3d,' % sol[i][j],
		print ']'

def isSafe(x, y, sol):
	if (x >= 0 and x < N and y >= 0 and y < N and sol[y][x] == -1):
		return True
	return False


#BackTracking algorithm
def solveKTUtil(x, y, movei, sol, xMove, yMove):
	
	if movei >= N*N:
		return True

	#try all moves from the current coordinate x,y

	for i in range(8):
		next_x = x+xMove[i]
		next_y = y+yMove[i]

		if isSafe(next_x, next_y, sol):
			sol[next_x][next_y] = movei
			if solveKTUtil(next_x, next_y, movei+1, sol, xMove, yMove):
				return True
			else:
				sol[next_x][next_y] = -1 #Backtracking, reversing the current move
	return False

#Warnsdorff's Algorithm, Heuristic: for the current available moves, choose the move with minimum number od consequent moves
def solveKTUtil_Heuristic(x, y, movei, sol, xMove, yMove):
	if movei >= N*N:
		return True

	#Initialising the array to store the no. of next valid for each subsequent current moves
	no_of_next_legal_move = [0]*8

	for i in range(8):
		
		#Make the current move using all available move
		next_x = x+xMove[i]
		next_y = y+yMove[i]
		
		#Check whether current move is safe or not
		if isSafe(next_x, next_y, sol):
			
			#Limiting condition: if last movei reaches in this block safely, then it means matrix is full now, return True
			if movei == N*N-1:
				sol[next_y][next_x] = movei
				return True
			#Otherwise create list of no. of next valid moves for each subsequent move
			no_of_next_legal_move[i] = check_for_legal_case(next_x, next_y, sol, xMove, yMove)
	
	#if no next move available for all current moves, return False
	if sum(no_of_next_legal_move) == 0:
		return False

	#changing the reference to current list objects
	temp_list = no_of_next_legal_move

	#convert all the 0's with max value 64 (arbitray value), max_no_of_moves = 8
	while min(temp_list) == 0:
		temp_list[temp_list.index(min(temp_list))] = 64

	#Loop until valid moves are available or, all values are not 0 i.e, 64
	while sum(temp_list) != 512:

		#Heuristic: find the move with minimum number of valid next moves
		n = temp_list.index(min(temp_list))
		
		#Prepare the next move
		next_x = x+xMove[n]
		next_y = y+yMove[n]
		sol[next_y][next_x] = movei
		
		#For current position in the matrix, find the next move recursivily
		if solveKTUtil_Heuristic(next_x, next_y, movei+1, sol, xMove, yMove):
			return True
		else:
			#Backtracking: if last move failed in achieving result, reverse the last step
			sol[next_y][next_x] = -1
			#Mark the current move as Max, to visit next minimum
			temp_list[n] = 64
	#if the entire list of no_of_next_legal_moves has been exhausted
	return False
	

def check_for_legal_case(x, y, sol, xMove, yMove):
	no_of_legal_moves = 0

	for i in range(8):
		next_x = x+xMove[i]
		next_y = y+yMove[i]
		
		if isSafe(next_x, next_y, sol):
			no_of_legal_moves += 1
	return no_of_legal_moves

solveKT()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 3
import time
N = 12
ti = 0
d15 1
a15 1
	if (solveKTUtil_Heuristic(0, 0, 1, sol, xMove, yMove, 0) == False):
d30 2
d51 2
a52 2
#Heuristic: for the current available moves, choose the move with minimum number od consequent moves
def solveKTUtil_Heuristic(x, y, movei, sol, xMove, yMove, itr):
d56 1
d60 2
a61 1

a63 2
		#if movei == 24:
			#print "movei", movei, "x,y", x, y, "for i=", i, "next_x", next_x, "next_y", next_y
d65 1
d67 4
a70 8
			#if movei == 24:
			#	print "movei", movei, "(x, y)", x,y, "for i=", i, "next_x", next_x, "next_y", next_y
			sol[next_y][next_x] = movei
			mini = 64
			for m in range(N):
				if mini > min(sol[m]):
					mini = min(sol[m])
			if mini == 0:	
d72 1
a72 4
			else:
				sol[next_y][next_x] = -1


d74 2
a75 1
		
d78 5
a82 2
	
	temp_list = []+no_of_next_legal_move
d86 2
a87 2
	#print "movei", movei, no_of_next_legal_move
	#print temp_list
d89 1
a89 1
	while sum(temp_list) != 512:
d91 2
a92 4
		global ti
		time.sleep(ti)
		if itr == 0:
			n = 4
a95 3
		#if itr == 0:
		#print "itr", itr, "temp_list", temp_list, "min", n,"next_x", next_x, "next_y", next_y, "sum", sum(temp_list)
		#print n, next_x, next_y, sol[next_x][next_y]
d97 2
a98 12
	#	if (sol[1][2] == 1 and sol[0][4] == 2 and sol[2][3] == 3 and sol[4][4] == 4 and sol[3][2] == 5 
	#		and sol[4][0] == 6 and sol[2][1] == 7 and sol[1][3] == 8 and sol[0][1] == 9 and sol[2][0] == 10
	#		and sol[4][1] == 11 and sol[3][3] == 12 and sol[1][4] == 13 and sol[0][2] == 14
	#		and sol[1][0] == 15 and sol[2][2] == 16 and sol[3][4] == 17 and sol[4][3] == 23) :# and sol[4][2] == 18):
	#		print
	#		ti = 1

	#	for j in range(N):
	#		print sol[j]


		if solveKTUtil_Heuristic(next_x, next_y, movei+1, sol, xMove, yMove, itr+1):
d101 1
d103 1
d105 1
a105 1
			#print "itr", itr, "Btemp_list", temp_list, "sum", sum(temp_list)
a110 2
	
	#sol[y][x] = 
a114 1
		#print "for i=", i, "x",x,"y",y, "next_x", next_x, "next_y", next_y
@
